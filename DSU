#include<bits/stdc++.h>
using namespace std;
struct dsu
{
    vector<int>sz, parent;
    //vector<int>rank;
    dsu(int n)
    {
        //rank.resize(n + 1, 0);
        sz.resize(n + 1, 1);
        parent.resize(n + 1);
        for(int i = 0; i <= n; i++) parent[i] = i;
    }
    int findparent(int child)
    {
        if(child == parent[child]) return child;
        return parent[child] = findparent(parent[child]);
    }
    bool same_parent(int u, int v)
    {
        int parent_u = findparent(u), parent_v = findparent(v);
        return parent_u == parent_v;
    }
    void unionbysize(int u, int v)
    {
        int parent_u = findparent(u), parent_v = findparent(v);
        if(parent_u == parent_v) return;
        if(sz[parent_u] < sz[parent_v]) swap(sz[parent_u], sz[parent_v]);
        parent[parent_v] = parent_u;
        sz[parent_u] += sz[parent_v];
    }
    // void unionbyrank(int u, int v)
    // {
    //     int parent_u = findparent(u), parent_v = findparent(v);
    //     if(parent_u == parent_v) return;
    //     if(rank[parent_u] == rank[parent_v]) rank[parent_u]++;
    //     if(rank[parent_u] < rank[parent_v]) swap(rank[parent_u], rank[parent_v]); 
    //     parent[parent_v] = parent_u;
    // }
    int ssize(int u)
    {
        return sz[findparent(u)];
    }
};
int main()
{
    int node = 7;
    dsu graph(node);
    graph.unionbysize(1, 2);
    graph.unionbysize(2, 3);
    graph.unionbysize(4, 5);
    graph.unionbysize(6, 7);
    graph.unionbysize(5, 6);
    if(graph.findparent(3) == graph.findparent(7))
        cout<< "Same component" << endl;
    else
        cout<< "Different component" << endl;
    graph.unionbysize(3, 7);
    if(graph.findparent(3) == graph.findparent(7))
        cout<< "Same component" << endl;
    else
        cout<< "Different component" << endl;
}
/*
int main()
{
    int node, edge, query;
    cin>>node>>edge;
    dsu graph(node);
    for(int i = 0; i < edge; i++)
    {
        int u, v;
        cin>>u>>v;
        graph.unionbysize(u, v);
    }
    for(int i = 0; i < query; i++)
    {
        int u, v;
        cin>>u>>v;
        if(graph.findparent(u) == graph.findparent(v))
            cout<< "Same component" << endl;
        else
            cout<< "Different component" << endl;
    }
}
*/
/*
import java.util.*;

class dsu {
    int[] parent;
    int[] size;

    dsu(int n) {
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    public int find_parent(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = find_parent(parent[node]);
    }

    public void union_by_size(int u, int v) {
        int parent_u = find_parent(u);
        int parent_v = find_parent(v);
        if (parent_u == parent_v)
            return;
        if (size[parent_u] < size[parent_v]) {
            parent[parent_u] = parent_v;
            size[parent_v] += size[parent_u];
            size[parent_u] = 0;
        } else {
            parent[parent_v] = parent_u;
            size[parent_u] += size[parent_v];
            size[parent_v] = 0;
        }
    }
}

public class Fun {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int node, edge;
        node = sc.nextInt();
        edge = sc.nextInt();
        dsu graph = new dsu(node);
        for (int i = 0; i < edge; i++) {
            int u, v;
            u = sc.nextInt();
            v = sc.nextInt();
            graph.union_by_size(u, v);
        }
        int cnt = 0;
        for (int i = 0; i < node; i++) {
            if (graph.parent[i] == i)
                cnt++;
        }
        System.out.println(cnt);
        sc.close();
    }
}
//////////////////////////////////////////////////////////////////////
input:
6 4
0 1
1 2
3 4
4 5
output:
2
*/
