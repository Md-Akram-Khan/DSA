vector<ll> a, updatevalue;
/*
void build(int at, int l, int r)
{
    if(l == r)
    {
        mn[at] = a[l]; 
        return;
    }
    int mid = (l + r) / 2;
    build(at * 2, l, mid);
    build(at * 2 + 1, mid + 1, r);
    mn[at] = min(mn[at * 2], mn[at * 2 + 1]); 
}
*/
void update(int at, int l, int r, int lll, int rr, ll value)
{
    if(r < lll or rr < l)
        return;
    if(lll <= l and r <= rr)
    {
        updatevalue[at] += value;
        return;
    }
    int mid = (l + r) / 2;
    update(at * 2, l, mid, lll, rr, value);
    update(at * 2 + 1, mid + 1, r, lll, rr, value);
}
ll query(int at, int l, int r, int pos, ll sum)
{
    if(l == r)
    {
        sum += a[l] + updatevalue[at];
        return sum;
    }
    int mid = (l + r) / 2;
    if(pos <= mid) 
        sum += query(at * 2, l, mid, pos, sum) + updatevalue[at];
    else
        sum += query(at * 2 + 1, mid + 1, r, pos, sum) + updatevalue[at];
    return sum;
}
void solve()
{
    int n, q;
    cin>>n>>q;
    a.resize(n+1);
    updatevalue.resize(4 * n, 0);
    for(int i = 1; i <= n; i++)
        cin>>a[i];
    while(q--)
    {
        int p;
        cin>>p;
        if(p == 2)
        {
            int k;
            cin>>k;
            cout<<query(1, 1, n, k, 0)<<endl;
            continue;
        }
        int lll, rr;
        ll value;
        cin>>lll>>rr>>value;
        update(1, 1, n, lll, rr, value);
    }
}
