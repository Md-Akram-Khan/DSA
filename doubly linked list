#include<iostream>
using namespace std;

struct doubly_linked_list{
    struct node{
        int val;
        node *prev;
        node *next;
    };

    node *head, *tail;
    doubly_linked_list()
    {
        head = nullptr;
        tail = nullptr;
    }

    void insert_last(int x)
    {
        node *new_node = new node();
        new_node->val = x;
        new_node->prev = nullptr;
        new_node->next = nullptr;
        if(tail == nullptr)
        {
            head = new_node;
            tail = new_node;
        }
        else
        {
            new_node->prev = tail;
            tail->next = new_node;
            tail = new_node;
        }
    }
    void insert_first(int x)
    {
        node *new_node = new node();
        new_node->val = x;
        new_node->prev = nullptr;
        new_node->next = nullptr;
        if(head == nullptr)
        {
            head = new_node;
            tail = new_node;
        }
        else
        {
           new_node->next = head;
           head->prev = new_node;
           head = new_node;
        }
    }
    void delete_first()
    {
        if(head == nullptr)
            return;
        if(head == tail)
        {
            delete head;
            head = nullptr;
            tail = nullptr;
            return;
        }
        node *temp = head->next;
        delete head;
        head = temp;
        head->prev = nullptr;
    }
    void delete_last()
    {
        if(head == nullptr)
            return;
        if(head == tail)
        {
            delete head;
            head = nullptr;
            tail = nullptr;
            return;
        }
        node *temp = tail->prev;
        delete tail;
        tail = temp;
        tail->next = nullptr;
    } 
    void delete_first_occurrance(int x)
    {
        if(head == nullptr)
            return;
        
        if(head->val == x)
        {
            node *temp = head->next;
            delete head;
            head = temp;
            if (head != nullptr)
                head->prev = nullptr;
            else
                tail = nullptr;
            return;
        }
        node *temp = head;
       while(temp->next)
        {
            if(temp->next->val == x)
            {
                node *next_node = temp->next->next;
                delete temp->next;
                temp->next = next_node; 
                if(next_node != nullptr) 
                    next_node->prev = temp;
                else 
                    tail = temp;
                return;
            }
            temp = temp->next;
        }
        cout<<"Value "<<x<<" not found in the list."<<endl;
    }
    void print()
    {
        node *current = head;
        while(current)
        {
            cout<<current->val<<endl;
            current = current->next;
        }
    }
};
int main()
{
    int n,v;
    cin>>n;
    doubly_linked_list list;
    while(n--)
    {
        cin>>v;
        list.insert_last(v);
    }
    list.delete_first_occurrance(1);
    list.print();
}
