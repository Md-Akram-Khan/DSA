#include<bits/stdc++.h>
using namespace std;
class disjointset
{
    vector<int>rank, parent;
public:
    disjointset(int n)
    {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        for(int i = 0; i <= n; i++)
        {
            parent[i] = i;
        }
    }
    int findparent(int child)
    {
        if(child == parent[child])
            return child;
        return parent[child] = findparent(parent[child]);
    }
    void unionbyrank(int u, int v)
    {
        int parent_u = findparent(u), parent_v = findparent(v);
        if(parent_u == parent_v) return;
        if(rank[parent_u] < rank[parent_v])
            parent[parent_u] = parent_v;
        else if(rank[parent_u] > rank[parent_v])
            parent[parent_v] = parent_u;
        else
        {
            parent[parent_u] = parent_v;
            rank[parent_v]++;
        }
    }
};
int main()
{
    int node = 7;
    disjointset graph(node);
    graph.unionbyrank(1, 2);
    graph.unionbyrank(2, 3);
    graph.unionbyrank(4, 5);
    graph.unionbyrank(6, 7);
    graph.unionbyrank(5, 6);
    if(graph.findparent(3) == graph.findparent(7))
        cout<< "Same component" << endl;
    else
        cout<< "Different component" << endl;
    graph.unionbyrank(3, 7);
    if(graph.findparent(3) == graph.findparent(7))
        cout<< "Same component" << endl;
    else
        cout<< "Different component" << endl;
}
/*
int main()
{
    int node, edge, query;
    cin>>node>>edge;
    disjointset graph(node);
    for(int i = 0; i < edge; i++)
    {
        int u, v;
        cin>>u>>v;
        graph.unionbyrank(u, v);
    }
    for(int i = 0; i < query; i++)
    {
        int u, v;
        cin>>u>>v;
        if(graph.findparent(u) == graph.findparent(v))
        cout<< "Same component" << endl;
        else
            cout<< "Different component" << endl;
    }
}
*/
