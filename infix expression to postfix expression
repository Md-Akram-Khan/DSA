#include <iostream>
#include <stack>
#include <string>
#include <cctype>

using namespace std;

int precedence(char op)
{
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/')
        return 2;
    if (op == '^')
        return 3;
    return 0; // For non-operators
}

bool is_operator(char ch)
{
    return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^';
}

string infix_to_postfix(const string &infix)
{
    stack<char> operators; 
    string postfix;        

    for (char ch : infix)
    {
        if (isalnum(ch))
        {
            postfix += ch;
        }
        else if (ch == '(')
        {
            operators.push(ch);
        }
        else if (ch == ')')
        {
            while (!operators.empty() && operators.top() != '(')
            {
                postfix += operators.top();
                operators.pop();
            }
            if (!operators.empty() && operators.top() == '(')
            {
                operators.pop();
            }
        }
        else if (is_operator(ch))
        {
            while (!operators.empty() && precedence(ch) <= precedence(operators.top()) && operators.top() != '(')
            {
                postfix += operators.top();
                operators.pop();
            }
            operators.push(ch);
        }
    }

    while (!operators.empty())
    {
        postfix += operators.top();
        operators.pop();
    }

    return postfix;
}

int main()
{
    string infix;
    cin >> infix;

    string postfix = infix_to_postfix(infix);
    cout << postfix << endl;
    return 0;
}
