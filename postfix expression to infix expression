#include <iostream>
#include <stack>
#include <string>

using namespace std;

bool is_operator(char ch)
{
    return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^';
}

string postfix_to_infix(const string &postfix)
{
    stack<string> s;

    for (char ch : postfix)
    {
        if (isalnum(ch))
        {
            s.push(string(1, ch));
        }
        else if (is_operator(ch))
        {
            // if (s.size() < 2)
            // {
            //     throw runtime_error("Invalid postfix expression");
            // }
            string op2 = s.top();
            s.pop();
            string op1 = s.top();
            s.pop();

            string infix = "(" + op1 + ch + op2 + ")";
            s.push(infix);
        }
        // else
        // {
        //     throw runtime_error("Invalid character in expression");
        // }
    }

    // if (s.size() != 1)
    // {
    //     throw runtime_error("Invalid postfix expression");
    // }

    return s.top();
}

int main()
{
    string postfix;
    cin >> postfix;

    string infix = postfix_to_infix(postfix);
    cout << infix << endl;

    return 0;
}
